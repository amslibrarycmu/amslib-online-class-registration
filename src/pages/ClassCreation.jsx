import React, { useState } from "react";
import Sidebar from "../components/Sidebar";

export default function ClassCreation() {
  const [showForm, setShowForm] = useState(false);
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");
  const [startTime, setStartTime] = useState("");
  const [endTime, setEndTime] = useState("");
  const [activityName, setActivityName] = useState("");
  const [description, setDescription] = useState("");
  const [speaker, setSpeaker] = useState("");
  const [platform, setPlatform] = useState("");
  const [link, setLink] = useState("");
  const [maxParticipants, setMaxParticipants] = useState("");
  const [audience, setAudience] = useState([]);
  const [evaluationLink, setEvaluationLink] = useState("");
  const classId = Math.floor(100000 + Math.random() * 900000); // 6-digit ID

  const handleAudienceChange = (e) => {
    const { value, checked } = e.target;
    setAudience((prev) =>
      checked ? [...prev, value] : prev.filter((item) => item !== value)
    );
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const newClass = {
      id: classId,
      startDate,
      endDate,
      startTime,
      endTime,
      activityName,
      description,
      speaker,
      platform,
      link,
      maxParticipants,
      audience,
      evaluationLink,
    };
    console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà:", newClass);
    alert("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
  };

  return (
    <div className="flex">
      <Sidebar />
      <div className="p-8 flex flex-col gap-4">
        <h1 className="text-2xl font-bold mb-4">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h1>
        <div className="flex flex-row gap-x-10">
          <div className="flex flex-col gap-3">
            <button
              onClick={() => setShowForm(true)}
              className="text-white font-bold cursor-pointer hover:underline bg-transparent border-none p-0 m-0 w-[300px]"
            >
              ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            </button>
            <button
              onClick={() => alert("‡πÄ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°")}
              className="text-white font-bold cursor-pointer hover:underline bg-transparent border-none p-0 m-0 w-[300px]"
            >
              ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
            </button>
            <button
              onClick={() => alert("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡πà‡∏≤‡∏á")}
              className="text-white font-bold cursor-pointer hover:underline bg-transparent border-none p-0 m-0 w-[300px]"
            >
              ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
            </button>
          </div>
        </div>
      </div>

      {showForm && (
        <form
          onSubmit={handleSubmit}
          className="w-screen max-w-2xl space-y-4 bg-white text-black p-6 rounded shadow m-10"
        >
          <div>
            <label className="block font-medium mb-1">
              ‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (Class ID)
            </label>
            <input
              value={classId}
              readOnly
              className="w-full border px-4 py-2 rounded bg-gray-100"
            />
          </div>

          <div>
            <label className="block font-medium mb-1">‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ß‡∏¥‡∏ä‡∏≤</label>
            <input
              type="text"
              value={activityName}
              onChange={(e) => setActivityName(e.target.value)}
              required
              className="w-full border px-4 py-2 rounded"
            />
          </div>

          <div>
            <label className="block font-medium mb-1">‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏£</label>
            <input
              type="text"
              value={speaker}
              onChange={(e) => setSpeaker(e.target.value)}
              className="w-full border px-4 py-2 rounded"
            />
          </div>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <div>
              <label className="block font-medium mb-1">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°</label>
              <input
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
                required
                className="w-full border px-4 py-2 rounded"
              />
            </div>
            <div>
              <label className="block font-medium mb-1">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
              <input
                type="date"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
                className="w-full border px-4 py-2 rounded"
              />
            </div>
            <div>
              <label className="block font-medium mb-1">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°</label>
              <input
                type="time"
                value={startTime}
                onChange={(e) => setStartTime(e.target.value)}
                required
                className="w-full border px-4 py-2 rounded"
              />
            </div>
            <div>
              <label className="block font-medium mb-1">‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î</label>
              <input
                type="time"
                value={endTime}
                onChange={(e) => setEndTime(e.target.value)}
                required
                className="w-full border px-4 py-2 rounded"
              />
            </div>
          </div>

          <div>
            <label className="block font-medium mb-1">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°</label>
            <textarea
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              rows="3"
              className="w-full border px-4 py-2 rounded"
            />
          </div>

          <div>
            <label className="block font-medium mb-1">‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</label>
            <select
              value={platform}
              onChange={(e) => setPlatform(e.target.value)}
              className="w-full border px-4 py-2 rounded"
            >
              <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°</option>
              <option value="‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå (Zoom)">‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå </option>
              <option value="‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô">‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô </option>
              <option value="‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå">‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå  </option>
            </select>
          </div>

          <div>
            <label className="block font-medium mb-1">‡∏•‡∏¥‡∏á‡∏Å‡πå</label>
            <input
              type="url"
              value={link}
              onChange={(e) => setLink(e.target.value)}
              className="w-full border px-4 py-2 rounded"
            />
          </div>

          <div>
            <label className="block font-medium mb-1">
              ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            </label>
            <input
              type="number"
              value={maxParticipants}
              onChange={(e) => setMaxParticipants(e.target.value)}
              className="w-full border px-4 py-2 rounded"
            />
          </div>

          <div>
            <label className="block font-medium mb-1">‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</label>
            <div className="flex gap-4">
              <label>
                <input
                  type="checkbox"
                  value="‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤"
                  onChange={handleAudienceChange}
                />
                {"  "}
                ‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤
              </label>
              <label>
                <input
                  type="checkbox"
                  value="‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå"
                  onChange={handleAudienceChange}
                />
                {"  "}
                ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå
              </label>
              <label>
                <input
                  type="checkbox"
                  value="‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"
                  onChange={handleAudienceChange}
                />
                {"  "}
                ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
              </label>
              <label>
                <input
                  type="checkbox"
                  value="‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å"
                  onChange={handleAudienceChange}
                />
                {"  "}
                ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
              </label>
            </div>
          </div>

          <div>
            <label className="block font-medium mb-1">
              ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            </label>
            <input
              type="url"
              value={evaluationLink}
              onChange={(e) => setEvaluationLink(e.target.value)}
              className="w-full border px-4 py-2 rounded"
            />
          </div>

          <div className="flex gap-5 w-content-center justify-center mt-6">
            <button
              type="submit"
              className="bg-purple-700 text-white px-6 py-2 rounded hover:bg-purple-800 w-[150px]"
            >
              ‡∏™‡∏£‡πâ‡∏≤‡∏á
            </button>

            <button
              type="submit"
              className="bg-purple-700 text-white px-6 py-2 rounded hover:bg-purple-800 w-[150px]"
            >
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡πà‡∏≤‡∏á
            </button>
          </div>
        </form>
      )}
    </div>
  );
}
